package com.microsoft.AzureIntelligentServicesExample;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;

import com.microsoft.projectoxford.speechrecognition.Contract;
import com.microsoft.projectoxford.speechrecognition.DataRecognitionClient;
import com.microsoft.projectoxford.speechrecognition.DataRecognitionClientWithIntent;
import com.microsoft.projectoxford.speechrecognition.ISpeechRecognitionServerEvents;
import com.microsoft.projectoxford.speechrecognition.MicrophoneRecognitionClient;
import com.microsoft.projectoxford.speechrecognition.MicrophoneRecognitionClientWithIntent;
import com.microsoft.projectoxford.speechrecognition.RecognitionResult;
import com.microsoft.projectoxford.speechrecognition.RecognitionStatus;
import com.microsoft.projectoxford.speechrecognition.SpeechRecognitionMode;
import com.microsoft.projectoxford.speechrecognition.SpeechRecognitionServiceFactory;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

public class MainActivity extends Activity implements ISpeechRecognitionServerEvents
{
    int m_waitSeconds = 0;
    MicrophoneRecognitionClient m_micClient = null;
    SpeechRecognitionMode m_recoMode = SpeechRecognitionMode.ShortPhrase;
    FinalResponseStatus isReceivedResponse = FinalResponseStatus.NotReceived;

    public enum FinalResponseStatus { NotReceived, OK, Timeout }

    public void onPartialResponseReceived(final String response)
    {
        EditText myEditText = (EditText) findViewById(R.id.editText1);
        myEditText.setText(response);
    }

    public void onFinalResponseReceived(final RecognitionResult response)
    {
        // we got the final result, so it we can end the mic reco.  No need to do this
        // for dataReco, since we already called endAudio() on it as soon as we were done
        // sending all the data.
        m_micClient.endMicAndRecognition();
        Button startButton = (Button) findViewById(R.id.button1);
        startButton.setEnabled(true);
        this.isReceivedResponse = FinalResponseStatus.OK;

        EditText myEditText = (EditText) findViewById(R.id.editText1);
        myEditText.setText(response.Results[response.Results.length - 1].DisplayText);

        /*
        for (int i = 0; i < response.Results.length; i++) {
            myEditText.append(i + " Confidence=" + response.Results[i].Confidence +
                    " Text=\"" + response.Results[i].DisplayText + "\"\n");
        }*/
    }

    /**
     * Called when a final respconse is received and its intent is parsed
     */
    public void onIntentReceived(final String payload)
    {
        EditText myEditText = (EditText) findViewById(R.id.editText1);
        myEditText.append("********* Final Intent *********\n");
        myEditText.append(payload + "\n");
    }

    public void onError(final int errorCode, final String response)
    {
        Button startButton = (Button) findViewById(R.id.button1);
        startButton.setEnabled(true);

        EditText myEditText = (EditText) findViewById(R.id.editText1);
        myEditText.append("********* Error Detected *********\n");
        myEditText.append(errorCode + " " + response + "\n");
    }

    /**
     * Invoked when the audio recording state has changed.
     *
     * @param recording The current recording state
     */
    public void onAudioEvent(boolean recording)
    {
        if (!recording) {
            m_micClient.endMicAndRecognition();
            Button startButton = (Button) findViewById(R.id.button1);
            startButton.setEnabled(true);
        }

        EditText myEditText = (EditText) findViewById(R.id.editText1);
        myEditText.append("********* Microphone status: " + recording + " *********\n");
    }

    void initializeRecoClient()
    {
        String language = "en-us";

        String subscriptionKey = this.getString(R.string.subscription_key);

        if (null == m_micClient) {
            m_micClient = SpeechRecognitionServiceFactory.createMicrophoneClient(this,
                    m_recoMode,
                    language,
                    this,
                    subscriptionKey);
        }
    }

    void addListenerOnButton()
    {
        final Button startButton = (Button) findViewById(R.id.button1);
        startButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View arg0)
            {
                EditText myEditText = (EditText) findViewById(R.id.editText1);
                myEditText.setText("");
                startButton.setEnabled(false);
                m_micClient.startMicAndRecognition();
            }
        });

        final Context appContext = this;
        Button finalResponseButton = (Button) findViewById(R.id.button2);

        finalResponseButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View arg0)
            {
                AlertDialog alertDialog;
                alertDialog = new AlertDialog.Builder(appContext).create();
                alertDialog.setTitle("Final Response");
                EditText myEditText = (EditText) findViewById(R.id.editText1);

                if (m_micClient != null) {
                    while(isReceivedResponse == FinalResponseStatus.NotReceived) {}
                    m_micClient.endMicAndRecognition();
                    String msg = isReceivedResponse == FinalResponseStatus.OK ? "See TextBox below for response.  App Done" : "Timed out.  App Done";
                    alertDialog.setMessage(msg);
                    startButton.setEnabled(false);
                    try {
                        m_micClient.finalize();
                    } catch (Throwable e) {
                        myEditText.append(e + "\n");
                    }
                }
                alertDialog.show();
            }
        });
    }

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (getString(R.string.subscription_key).startsWith("Please")) {
            new AlertDialog.Builder(this)
                    .setTitle(getString(R.string.add_subscription_key_tip_title))
                    .setMessage(getString(R.string.add_subscription_key_tip))
                    .setCancelable(false)
                    .show();
        }
        m_waitSeconds = m_recoMode == SpeechRecognitionMode.ShortPhrase ? 20 : 200;

        initializeRecoClient();
        addListenerOnButton();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings)
            return true;
        return super.onOptionsItemSelected(item);
    }
}

